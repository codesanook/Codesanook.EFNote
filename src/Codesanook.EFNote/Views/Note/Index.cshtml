@using Codesanook.EFNote.ViewModels
@using Codesanook.EFNote.Controllers

@model NoteIndexViewModel
@{
  ViewData["Title"] = "Note - App";
}

<div class="main-panel">
  <div class="notebook-list">
    @foreach (var notebook in Model.AllNotebooks)
    {
      @Html.ActionLink(
    notebook.Name,
    "Index",
    new { selectedNotebookId = notebook.Id },
    new { @class = notebook.Id == Model.SelectedNotebook?.Id ? "notebook-list-item -selected" : "notebook-list-item" }
    )
    }
  </div>
  <div class="note-list">
    @foreach (var note in Model.AllNotesForSelectedNotebook)
    {
      @Html.ActionLink(
    note.Title,
    "Index",
    new { selectedNotebookId = note.NotebookId, selectedNoteId = note.Id },
    new { @class = note.Id == Model.SelectedNote?.Id ? "note-list-item -selected" : "note-list-item" }
    )
    }
  </div>
  <div class="note-item-panel">
    <div class="note-item">
      <form method="post">
        <div class="form-group">
          <div class="note-menu-bar">
            @{
              var newNoteActionUrl = Url.Action("Create", new { selectedNotebookId = Model.SelectedNotebook?.Id });
              var saveNoteActionUrl = Model.SelectedNote == null
              ? Url.Action("Create")
              : Url.Action("Edit", new { id = Model.SelectedNote?.Id });
            }

            <button class="btn btn-light" formaction="@saveNoteActionUrl" formmethod="post">
              <i class="fa fa-save"></i> Save
            </button>
            <a class="btn btn-light" href="@newNoteActionUrl" role="button">
              <i class="fa fa-plus-circle"></i> New
            </a>
            @if (Model.SelectedNote != null)
            {
              <a class="btn btn-light" href="@Url.Action(
                  "Delete",
                  "Note",
                  new { id = Model.SelectedNote.Id }
                )" role="button">
                <i class="fa fa-trash"></i> Delete
              </a>
            }
          </div>
        </div>
        <div class="form-group">
          @Html.Label("Notebook")
          @Html.DropDownListFor(
          m => m.SelectedNote.NotebookId,
          Model.AllNotebooks.Select(b => new SelectListItem()
          {
          Value = b.Id.ToString(),
          Text = b.Name,
          Selected = (b.Id == Model.SelectedNote?.NotebookId || b.Id == Model.SelectedNotebook?.Id)
          }),
          "Please select an existing \"notebook\" or create a new one.",
          new { @class = "form-control form-control-sm" }
          )
        </div>
        <div class="form-group">
          @Html.LabelFor(m => m.SelectedNote.Title)
          @Html.TextBoxFor(m => m.SelectedNote.Title, new { @class = "form-control form-control-sm title" })
        </div>
        <div class="form-group">
          @Html.LabelFor(m => m.SelectedNote.Tags) (CSV)
          @Html.TextBoxFor(m => m.SelectedNote.Tags, new { @class = "form-control form-control-sm tags" })
        </div>
        <div class="form-group">
          @Html.LabelFor(m => m.SelectedNote.Content)
          @Html.TextAreaFor(m => m.SelectedNote.Content, new { @class = "form-control form-control-sm content", row = 10
          })
        </div>
      </form>
    </div>
  </div>
</div>
